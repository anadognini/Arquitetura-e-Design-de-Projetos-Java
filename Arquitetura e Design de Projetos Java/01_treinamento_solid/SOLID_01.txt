Pilares importantes da orientação a objetos:

- Coesão: harmonia entre elementos. Em termos de software, quando modelamos uma classe, a 
união harmônica seria entre as coisas que estão nesta classe. Classes não coesas tendem 
a crescer indefinidamente, o que as tornam difíceis de serem mantidas. Cada classe deve 
ser responsável por apenas uma coisa, e deve executar esta tarefa muito bem.

Uma classe coesa faz bem uma única coisa. Classes coesas não devem ter várias 
responsabilidades.

- Encapsulamento: incluir, proteger, blindar uma classe contra influências externas, 
contra manipulações externas que possam vir a prejudicar a consistência das informações. 
Isso significa mais do que tornar os atributos como private, acessando-os pelos getters
e setters. Vai além disso. Em alguns casos, isso pode até mesmo "ferir" o encapsulamento
da classe.

Ao encapsular o acesso a determinados dados, liberando acesso apenas ao necessário, os 
objetos da nossa classe se tornam mais fáceis de serem utilizados.

Um dos processos que garante o encapsulamento é fazendo com que seu status seja acessado
ou modificado apenas por métodos. Isso inclui verificações, atribuições, cálculos, etc.

Classes não encapsuladas permitem violação de regras de negócio, além de aumentarem o 
acoplamento. Isso pode gerar classes com estados inválidos e com atributos que não 
deveriam ter.

É interessante fornecer acesso apenas ao que é necessário em nossas classes. O 
encapsulamento torna o uso das nossas classes mais fácil e intuitivo.

- Acoplamento: num contexto de desenvolvimento de software e P.O.O., a ideia de acoplamento
está ligada à existência de dois componentes que estão interligados entre si, causando
uma dependência entre os dois. Por exemplo: uma classe A que faz a utilização de outra
classe B. Só isso já gera um acoplamento. O acoplamento não é necessariamente algo ruim,
o problema é quando este acoplamento é muito forte, de uma maneira que os componentes
tenham acesso às partes "privadas" um do outro. Este princípio, se não gerido com 
cuidado, pode gerar problemas no código.

Além disso, quanto menor o encapsulamento, maior o acoplamento.

Classes acopladas causam fragilidade no código da aplicação, o que dificulta sua 
manutenção. Qualquer mudança em um ponto, pode gerar impacto em outros pontos, gerando
um acúmulo de coisas a serem consertadas.

É fato que, se estamos organizando o nosso código, seguindo as recomendações da 
orientação a objetos, algum acoplamento acontecerá. Algumas classes precisarão de 
outras, para que não tenham muitas responsabilidades. Cabe a nós medir quando faz 
sentido adicionar tal acoplamento com as dependências e como depender do que é seguro, 
ao invés de classes concretas. Falaremos mais sobre isso neste treinamento.

Os princípios do SOLID estão diretamente ligados aos princípios da orientação a objetos.

Acoplamento nem sempre é ruim e é impossível criar um sistema sem nenhum acoplamento.
Devemos controlar o nível de acoplamento na nossa aplicação. 